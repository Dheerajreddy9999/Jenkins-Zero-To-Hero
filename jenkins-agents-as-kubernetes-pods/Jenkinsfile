pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
            spec:
              serviceAccount: jenkins
              containers:
              - name: maven
                image: maven:3.8.6-openjdk-8-slim
                command:
                - cat
                tty: true
              - name: helm-kubectl
                image: dtzar/helm-kubectl:3.12.1
                command:
                - cat
                tty: true
              - name: kaniko
                image: gcr.io/kaniko-project/executor:debug
                command:
                - cat
                tty: true
                volumeMounts:
                - name: kaniko-secret
                  mountPath: /kaniko/.docker
              volumes:
              - name: kaniko-secret
                secret:
                  secretName: regcred
                  items:
                    - key: .dockerconfigjson
                      path: config.json
            '''
        }
    }

    environment {
        dockerRepoName = "dheerajlearningdocker/vprofile-app"
        imageTag = "V${BUILD_NUMBER}"
    }

    stages{


      stage('Git Checkout') {
        steps {
          git branch: 'main', url: 'https://github.com/Dheerajreddy9999/Jenkins-complete-e2e-pipeline.git'
        }
      }

        stage('UNIT TEST') {
         steps {
            container ('maven') {
                sh 'mvn test'
            }
         }
      }


      stage('INTEGRATION TEST') {
         steps {
             container ('maven') {
                 sh 'mvn verify -DskipUnitTests'
            }
         }      
      }

      stage ('Build') {
            steps {
                container ('maven') {
                    sh 'mvn clean install -DskipTests'
                }
            }
        }

      stage('CODE ANALYSIS WITH CHECKSTYLE') {
         steps {
            container ('maven') {
                  sh 'mvn checkstyle:checkstyle'
            }
         }
      }

      stage('CODE ANALYSIS with SONARQUBE') {

            environment {
                scannerHome = tool 'sonar4.7'
            }

            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                   '''
                }

                 timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                 }   
           }
      } 

        stage ('build image') {
            steps {
                container ('kaniko') {
                    sh "/kaniko/executor --context `pwd` --destination $dockerRepoName:$imageTag "
                }
            }
        }


        // stage('Deploy to k8') {
        //   steps {
        //     container ('helm-kubectl') {
        //       sh 'helm upgrade --install --force ecommerce helm/vprofilechart  \
        //       --set vproapp.image.repository=${dockerRepoName} \
        //       --set vproapp.image.tag=${imageTag} \
        //       -n prod --create-namespace \
        //       -f helm/vprofilechart/dev-values.yaml'
        //     }
        //   }
        // }



        stage('Deploy to k8') {
          steps {
            container ('helm-kubectl') {
              withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k3d-kubeconfig', namespace: '', serverUrl: '']]) {
               sh 'helm upgrade --install ecommerce helm/vprofilechart  \
               --set vproapp.image.repository=${dockerRepoName} \
               --set vproapp.image.tag=${imageTag} \
               -n prod --create-namespace \
               -f helm/vprofilechart/dev-values.yaml'
              }
            }
          }
        }
    }
}
